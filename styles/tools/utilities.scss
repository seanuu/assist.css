@mixin generate-utility($utility) {
    $values: map-get($utility, values);

    @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
        $values: zip($values, $values);
    }

    @each $value in $values {
        $properties: map-get($utility, property);

        @if type-of($properties) == 'string' {
            $properties: append((), $properties);
        }

        @include generate-utility-body($utility, $properties, $value)
    }
}

@mixin generate-utility-body($utility, $properties, $value) {
    // Use custom class if present
    $property-class: map-get($utility, class);
    $property-class: if($property-class, $property-class, nth($properties, 1));

    // Don't prefix if value key is null (eg. with shadow class)
    $property-class-modifier: if(nth($value, 1), "-" + nth($value, 1), "");

    $value: nth($value, 2);

    .#{$property-class + $property-class-modifier} {
        @for $i from 1 through length($properties) {
            $property: nth($properties, $i);
            $val: $value;

            @if type-of($value) == 'list' and length($properties) == length($value) {
                $val: nth($value, $i);
            }

            #{$property}: $val !important;
        }
    }
}
